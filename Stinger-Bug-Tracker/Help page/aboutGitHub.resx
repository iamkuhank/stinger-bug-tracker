<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>